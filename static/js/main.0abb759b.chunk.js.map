{"version":3,"sources":["components/hangman/title_screen/title-screen.style.tsx","components/hangman/title_screen/title-screen.tsx","components/hangman/title_screen/index.ts","components/hangman/game/game.style.tsx","utils/socket.tsx","components/hangman/game/game.tsx","components/hangman/game/index.ts","utils/common.tsx","components/hangman/hangman.tsx","components/hangman/index.ts","App.tsx","App.style.tsx","serviceWorker.js","index.tsx"],"names":["colors","withStyles","Origin","spacing","breakpoints","createStyles","main","color","textTransform","boxSizing","padding","title","backgroundColor","borderRadius","fontSize","textAlign","display","fontWeight","down","margin","width","description","difficultyText","difficultyArea","difficultyButton","minWidth","borderColor","letterSpacing","background","bottomText","withTheme","classes","Grid","container","justify","className","item","xs","sm","style","textDecoration","to","Button","size","variant","buttonStyle","socket","socketIOClient","backButton","float","hintButton","hangman","border","word","keyboard","keyboardButton","height","keyboardButtonSuccess","keyboardButtonDanger","dailog","dialogTitle","minwidth","dialogTitleText","dialogContent","paddingTop","dialogContentText","dialogActions","dialogActionsButtonSuccess","dialogActionsButtonDanger","match","useState","tries","setTries","gameEnd","setGameEnd","alphabetMap","i","String","fromCharCode","getAlphabetMap","setAlphabetMap","hangmanWord","setHangmanWord","useEffect","emit","params","difficulty","on","msg","t","correct","character","onClick","src","process","alt","Object","keys","length","map","key","value","alphabet","disabled","Dialog","maxWidth","open","aria-labelledby","DialogTitle","DialogContent","DialogContentText","toUpperCase","DialogActions","md","window","location","reload","Hangman","exact","path","component","Game","THEME","createMuiTheme","typography","theme","gameWrap","game","direction","alignItems","xl","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0abb759b.chunk.js","sourcesContent":["import {createStyles, Theme} from '@material-ui/core';\r\n\r\nconst colors = {\r\n    red: 'rgba(197, 0, 50, 0.86)',\r\n    lightRed: 'rgba(197, 0, 50, 0.15)',\r\n    lightGrey: 'rgba(93,92,95,0.27)',\r\n    green: 'rgba(5,197,83,0.86)',\r\n    lightGreen: 'rgba(5,197,83,0.15)',\r\n};\r\n\r\nconst TitleScreenStyle = ({spacing, breakpoints}: Theme) => createStyles({\r\n    main: {\r\n        color: 'white',\r\n        textTransform: 'uppercase',\r\n        boxSizing: 'border-box',\r\n        padding: spacing(4),\r\n    },\r\n    title: {\r\n        backgroundColor: colors.red,\r\n        borderRadius: spacing(0.5),\r\n        fontSize: spacing(5),\r\n        textAlign: 'center',\r\n        display: 'block',\r\n        padding: `${spacing(2)}px ${spacing(0)}px`,\r\n        fontWeight: 'bolder',\r\n        [breakpoints.down('sm')]: {\r\n            margin: 0,\r\n            padding: 0,\r\n            width: '100%',\r\n            display: 'inline-table'\r\n        },\r\n    },\r\n    description: {\r\n        fontSize: spacing(2),\r\n        textAlign: 'center',\r\n        display: 'block',\r\n        padding: `${spacing(2)}px ${spacing(0)}px`,\r\n    },\r\n    difficultyText: {\r\n        fontSize: spacing(3),\r\n        textAlign: 'center',\r\n        display: 'block',\r\n        padding: `${spacing(6)}px ${spacing(0)}px ${spacing(2)}px`,\r\n    },\r\n    difficultyArea: {\r\n        fontSize: spacing(3),\r\n        textAlign: 'center',\r\n        display: 'block',\r\n        padding: `${spacing(2)}px ${spacing(0)}px`,\r\n    },\r\n    difficultyButton: {\r\n        minWidth: '100%',\r\n        backgroundColor: colors.lightRed,\r\n        borderColor: colors.red,\r\n        fontWeight: 'bolder',\r\n        color: 'white',\r\n        letterSpacing: '0.1em',\r\n        \"&:hover\": {\r\n            background: colors.red\r\n        },\r\n    },\r\n    bottomText: {\r\n        fontSize: spacing(2),\r\n        textAlign: 'center',\r\n        display: 'block',\r\n        padding: `${spacing(6)}px ${spacing(0)}px ${spacing(0)}px`,\r\n    },\r\n});\r\n\r\nexport {\r\n    TitleScreenStyle,\r\n}\r\n","import React from \"react\";\r\nimport {Button, Grid, withStyles} from \"@material-ui/core\";\r\nimport {TitleScreenStyle} from \"./title-screen.style\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface PropTypes {\r\n    classes: {\r\n        main: string,\r\n        title: string,\r\n        description: string,\r\n        difficultyText: string,\r\n        difficultyArea: string,\r\n        difficultyButton: string,\r\n        bottomText: string,\r\n    }\r\n}\r\n\r\nconst SERVER_PREFIX = '/hangman';\r\n\r\nfunction TitleScreen({classes}: PropTypes) {\r\n    return (\r\n        <Grid container\r\n              justify=\"center\"\r\n              className={classes.main}>\r\n            <Grid item xs={12} className={classes.title}>\r\n                hangman\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.description}>\r\n                May the odds be ever in your favor\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.difficultyText}>\r\n                Select Difficulty Level\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.difficultyArea}>\r\n                <Grid container spacing={1} justify=\"center\">\r\n                    <Grid item sm={7} xs={10}>\r\n                        <Link style={{textDecoration: 'none'}} to={`${SERVER_PREFIX}/game/easy`}>\r\n                            <Button size={'large'} variant=\"outlined\" className={classes.difficultyButton}>Easy</Button>\r\n                        </Link>\r\n                    </Grid>\r\n                    <Grid item sm={7} xs={10}>\r\n                        <Link style={{textDecoration: 'none'}} to={`${SERVER_PREFIX}/game/medium`}>\r\n                        <Button size={'large'} variant=\"outlined\" className={classes.difficultyButton}>Medium</Button>\r\n                        </Link>\r\n                    </Grid>\r\n                    <Grid item sm={7} xs={10}>\r\n                        <Link style={{textDecoration: 'none'}} to={`${SERVER_PREFIX}/game/hard`}>\r\n                        <Button size={'large'} variant=\"outlined\" className={classes.difficultyButton}>Hard</Button>\r\n                        </Link>\r\n                    </Grid>\r\n                    <Grid item sm={7} xs={10}>\r\n                        <Link style={{textDecoration: 'none'}} to={`${SERVER_PREFIX}/game/almost-impossible`}>\r\n                        <Button size={'large'} variant=\"outlined\" className={classes.difficultyButton}>Almost\r\n                            Impossible</Button>\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className={classes.bottomText}>\r\n                    Multiplayer coming soon!\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(TitleScreenStyle, {withTheme: true})(TitleScreen);\r\n","import Origin from './title-screen';\r\n\r\nexport default Origin;\r\n","import {createStyles, Theme} from '@material-ui/core';\r\n\r\nconst colors = {\r\n    darkRed: '#251818',\r\n    red: 'rgba(197, 0, 50, 0.86)',\r\n    lightRed: 'rgba(197, 0, 50, 0.15)',\r\n    lightGrey: 'rgba(93,92,95,0.27)',\r\n    green: 'rgba(5,197,83,0.86)',\r\n    lightGreen: 'rgba(5,197,83,0.15)',\r\n};\r\n\r\nconst buttonStyle = {\r\n    width: 'fit-content' as 'fit-content',\r\n    color: 'white',\r\n    backgroundColor: colors.lightRed,\r\n    borderColor: colors.red,\r\n    fontWeight: 'bolder' as 'bolder',\r\n    letterSpacing: '0.1em',\r\n    '&:hover': {\r\n        background: colors.red,\r\n    },\r\n};\r\n\r\nconst GameStyle = ({spacing, breakpoints}: Theme) => createStyles({\r\n    main: {\r\n        color: 'white',\r\n        textTransform: 'uppercase',\r\n        boxSizing: 'border-box',\r\n        padding: spacing(2),\r\n    },\r\n    backButton: {\r\n        ...buttonStyle,\r\n        float: 'left',\r\n    },\r\n    hintButton: {\r\n        ...buttonStyle,\r\n        float: 'right',\r\n        borderColor: colors.green,\r\n        backgroundColor: colors.lightGreen,\r\n        '&:hover': {\r\n            background: colors.green,\r\n        },\r\n    },\r\n    hangman: {\r\n        width: 'fit-content',\r\n        display: 'table',\r\n        margin: 'auto',\r\n        backgroundColor: colors.lightRed,\r\n        border: '2px solid rgba(197, 0, 50, 0.86)',\r\n        borderRadius: spacing(0.5)\r\n    },\r\n    word: {\r\n        fontSize: spacing(3),\r\n        textAlign: 'center',\r\n        display: 'block',\r\n        letterSpacing: '0.4em',\r\n        padding: `${spacing(2)}px ${spacing(0)}px ${spacing(2)}px`,\r\n        [breakpoints.down('md')]: {\r\n            fontSize: spacing(2),\r\n        },\r\n    },\r\n    keyboard: {\r\n        padding: spacing(2),\r\n        textAlign: 'center',\r\n    },\r\n    keyboardButton: {\r\n        height: spacing(4),\r\n        width: spacing(2),\r\n        fontSize: spacing(1.5),\r\n        margin: spacing(1),\r\n        color: 'white',\r\n        backgroundColor: colors.lightGrey,\r\n        borderColor: 'rgb(0,0,0)',\r\n        fontWeight: 'bolder',\r\n        \"&:hover\": {\r\n            background: \"rgb(0,0,0)\"\r\n        },\r\n        [breakpoints.down('md')]: {\r\n            height: spacing(3),\r\n            width: spacing(2),\r\n            fontSize: spacing(1),\r\n        },\r\n    },\r\n    keyboardButtonSuccess: {\r\n        height: spacing(4),\r\n        width: spacing(2),\r\n        fontSize: spacing(1.5),\r\n        margin: spacing(1),\r\n        color: 'white',\r\n        backgroundColor: colors.lightGreen,\r\n        borderColor: colors.green,\r\n        fontWeight: 'bolder',\r\n        \"&:hover\": {\r\n            background: colors.green\r\n        },\r\n        \"&:disabled\": {\r\n            background: colors.green,\r\n            color: 'white'\r\n        },\r\n        [breakpoints.down('md')]: {\r\n            height: spacing(3),\r\n            width: spacing(2),\r\n            fontSize: spacing(1),\r\n        },\r\n    },\r\n    keyboardButtonDanger: {\r\n        height: spacing(4),\r\n        width: spacing(2),\r\n        fontSize: spacing(1.5),\r\n        margin: spacing(1),\r\n        color: 'white',\r\n        backgroundColor: colors.lightRed,\r\n        borderColor: colors.red,\r\n        fontWeight: 'bolder',\r\n        \"&:hover\": {\r\n            background: colors.red\r\n        },\r\n        \"&:disabled\": {\r\n            background: colors.red,\r\n            color: 'white'\r\n        },\r\n        [breakpoints.down('md')]: {\r\n            height: spacing(3),\r\n            width: spacing(2),\r\n            fontSize: spacing(1),\r\n        },\r\n    },\r\n    dailog: {\r\n        padding: spacing(1),\r\n        background: `linear-gradient(180deg, rgba(0, 30, 41, 0.75), rgba(197, 0, 50, 0.65))`,\r\n    },\r\n    dialogTitle: {\r\n        minwidth: '20em',\r\n        background: colors.red,\r\n        textAlign: 'center'\r\n    },\r\n    dialogTitleText: {\r\n        color: 'white',\r\n        fontSize: spacing(4),\r\n    },\r\n    dialogContent: {\r\n        paddingTop: spacing(4),\r\n        backgroundColor: colors.darkRed,\r\n        textAlign: 'center'\r\n    },\r\n    dialogContentText: {\r\n        color: 'white',\r\n        fontSize: spacing(2)\r\n    },\r\n    dialogActions: {\r\n        backgroundColor: colors.darkRed,\r\n        display: 'inline-blocks',\r\n        padding: spacing(2),\r\n        textAlign: 'center'\r\n    },\r\n    dialogActionsButtonSuccess: {\r\n        height: '85%',\r\n        width: 'fit-content',\r\n        fontSize: spacing(1.5),\r\n        margin: spacing(1),\r\n        color: 'white',\r\n        backgroundColor: colors.lightGreen,\r\n        borderColor: colors.green,\r\n        fontWeight: 'bolder',\r\n        \"&:hover\": {\r\n            background: colors.green\r\n        },\r\n        \"&:disabled\": {\r\n            background: colors.green,\r\n            color: 'white'\r\n        }\r\n    },\r\n    dialogActionsButtonDanger: {\r\n        height: '85%',\r\n        width: 'fit-content',\r\n        fontSize: spacing(1.5),\r\n        margin: spacing(1),\r\n        color: 'white',\r\n        backgroundColor: colors.lightRed,\r\n        borderColor: colors.red,\r\n        fontWeight: 'bolder',\r\n        \"&:hover\": {\r\n            background: colors.red\r\n        },\r\n        \"&:disabled\": {\r\n            background: colors.red,\r\n            color: 'white'\r\n        }\r\n    }\r\n});\r\n\r\nexport {\r\n    GameStyle,\r\n}\r\n","import socketIOClient from \"socket.io-client\";\r\n\r\nconst SOCKET_ENDPOINT = \"https://hangman-server-1.herokuapp.com/\";\r\n\r\nconst socket = socketIOClient(SOCKET_ENDPOINT);\r\n\r\nexport default socket;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    Dialog, DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Grid,\r\n    withStyles\r\n} from '@material-ui/core';\r\n\r\nimport {GameStyle} from './game.style';\r\nimport {getAlphabetMap, socket} from '../../../utils';\r\n\r\ninterface PropTypes {\r\n    classes: {\r\n        main: string,\r\n        backButton: string,\r\n        hintButton: string\r\n        hangman: string,\r\n        word: string,\r\n        keyboard: string,\r\n        keyboardButton: string,\r\n        keyboardButtonSuccess: string,\r\n        keyboardButtonDanger: string,\r\n        dailog: string,\r\n        dialogTitle: string,\r\n        dialogTitleText: string,\r\n        dialogContent: string,\r\n        dialogContentText: string,\r\n        dialogActions: string,\r\n        dialogActionsButtonSuccess: string,\r\n        dialogActionsButtonDanger: string,\r\n    }\r\n    match: {\r\n        params: {\r\n            difficulty: 'easy' | 'medium' | 'hard' | 'almost-impossible',\r\n        }\r\n    }\r\n}\r\n\r\nfunction Game({classes, match}: PropTypes) {\r\n    const [tries, setTries] = useState<number>(0);\r\n    const [gameEnd, setGameEnd] = useState<boolean>(false);\r\n    const [alphabetMap, setAlphabetMap] = useState<any>(getAlphabetMap());\r\n    const [hangmanWord, setHangmanWord] = useState<string | undefined>('loading...');\r\n\r\n    useEffect(() => {\r\n        const getWord = () =>\r\n            socket.emit('get-word', match.params.difficulty === 'almost-impossible' ? 'superHard' : match.params.difficulty);\r\n\r\n        const setSocketListeners = () => {\r\n            socket.on('word', (msg: string) => {\r\n                setHangmanWord(msg);\r\n            });\r\n\r\n            socket.on('hint', (msg: string) => {\r\n                setAlphabetMap((t: any) => ({...t, [msg]: 1}))\r\n            });\r\n\r\n            socket.on('word-complete', (msg: string) => {\r\n                setGameEnd(true);\r\n                setHangmanWord(msg);\r\n            });\r\n\r\n            socket.on('check-word', (msg: { correct: boolean, character: string }) => {\r\n                if (msg.correct) {\r\n                    setAlphabetMap((t: any) => ({...t, [msg.character]: 1}));\r\n                } else {\r\n                    setAlphabetMap((t: any) => ({...t, [msg.character]: 2}));\r\n                    setTries((t) => (t === 6 ? 6 : (t + 1)))\r\n                }\r\n            });\r\n        };\r\n\r\n        getWord();\r\n        setSocketListeners();\r\n    }, [match]);\r\n\r\n    useEffect(() => {\r\n        if (tries === 6) {\r\n            setGameEnd(true);\r\n        }\r\n    }, [tries]);\r\n\r\n    const getHint = () => {\r\n        socket.emit('hint', 'hint');\r\n    };\r\n\r\n    const checkAlphabet = (alphabet: string) => {\r\n        socket.emit('check-word', alphabet);\r\n    };\r\n\r\n    return (\r\n        <Grid container\r\n              justify='center'\r\n              className={classes.main}>\r\n            <Grid item xs={12}>\r\n                <Link style={{textDecoration: 'none'}} to={'/'}>\r\n                    <Button size={'large'} variant='outlined' className={classes.backButton}>\r\n                        Go Back\r\n                    </Button>\r\n                </Link>\r\n                <Button size={'large'} variant='outlined' onClick={getHint} className={classes.hintButton}>\r\n                    hint\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.word}>\r\n                <div className={classes.hangman}>\r\n                    <img src={`${process.env.PUBLIC_URL}/hangman-${tries}.png`} height={'180'} width={'150'} alt='Hangman not fount :('/>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.word}>\r\n                {hangmanWord}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.keyboard}>\r\n                {Object.keys(alphabetMap).length ? Object.keys(alphabetMap)\r\n                    .map((key, value: number) =>\r\n                        <Button key={`${key}-${value}`}\r\n                                size={'small'}\r\n                                variant='outlined'\r\n                                onClick={() => checkAlphabet(key)}\r\n                                disabled={(alphabetMap[key] === 1 || alphabetMap[key] === 2)}\r\n                                className={alphabetMap[key] === 0 ? classes.keyboardButton : alphabetMap[key] === 1 ?\r\n                                    classes.keyboardButtonSuccess : classes.keyboardButtonDanger}>\r\n                            {key}\r\n                        </Button>) : <></>\r\n                }\r\n            </Grid>\r\n            <Dialog className={classes.dailog} maxWidth={\"lg\"} open={gameEnd} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle className={classes.dialogTitle}>\r\n                    <span className={classes.dialogTitleText}>GAME OVER</span>\r\n                </DialogTitle>\r\n                <DialogContent className={classes.dialogContent}>\r\n                    <DialogContentText className={classes.dialogContentText}>\r\n                        {tries === 6 ?\r\n                            match.params.difficulty === 'almost-impossible' ? 'TOLD YOU' : 'BETTER LUCK NEXT TIME'\r\n                            : match.params.difficulty === 'almost-impossible' ? 'The Legend Has Arrived'.toUpperCase() : 'YOU WIN!!'}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions className={classes.dialogActions}>\r\n                    <Grid justify={'center'} container>\r\n                        <Grid item md={7} xs={12}>\r\n                            <Link style={{textDecoration: 'none'}} to={'/'}>\r\n                                <Button size={'medium'}\r\n                                        variant='outlined'\r\n                                        className={classes.dialogActionsButtonDanger}>\r\n                                    Change Difficulty\r\n                                </Button>\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item md={5} xs={12}>\r\n                            <Button size={'medium'}\r\n                                    onClick={() => window.location.reload()}\r\n                                    variant='outlined'\r\n                                    className={classes.dialogActionsButtonSuccess}>\r\n                                Try again\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(GameStyle, {withTheme: true})(Game);\r\n","import Origin from './game';\r\n\r\nexport default Origin;\r\n","const getAlphabetMap = () => {\r\n    let alphabetMap = {};\r\n\r\n    for (let i = 0; i < 26; ++i) {\r\n        alphabetMap = {...alphabetMap, [String.fromCharCode(65 + i)]: 0}\r\n    }\r\n\r\n    return alphabetMap;\r\n};\r\n\r\nexport {\r\n    getAlphabetMap,\r\n}\r\n","import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from 'react-router-dom';\r\n\r\nimport TitleScreen from \"./title_screen\";\r\nimport Game from \"./game\";\r\n\r\nconst SERVER_PREFIX = '/hangman';\r\n\r\nfunction Hangman() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path={`${SERVER_PREFIX}/game/:difficulty`} component={Game} />\r\n                <Route exact path={`${SERVER_PREFIX}/*`}>\r\n                    <TitleScreen/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default Hangman;\r\n","import Origin from './hangman';\r\n\r\nexport default Origin;\r\n","import React from 'react'\r\nimport 'normalize.css';\r\nimport {createMuiTheme, Grid, MuiThemeProvider, withStyles} from '@material-ui/core';\r\n\r\nimport './App.scss';\r\nimport {AppStyle} from './App.style';\r\nimport {Hangman} from './components';\r\n\r\ninterface PropTypes {\r\n    classes: {\r\n        game: string,\r\n        gameWrap: string,\r\n    }\r\n}\r\n\r\nconst THEME = createMuiTheme({\r\n    typography: {\r\n        \"fontFamily\": `\"Lexend Zetta\", sans-serif`,\r\n        \"fontSize\": 11,\r\n        \"fontWeightLight\": 300,\r\n        \"fontWeightRegular\": 400,\r\n        \"fontWeightMedium\": 500\r\n    }\r\n});\r\n\r\nfunction App({classes}: PropTypes) {\r\n    return (\r\n        <MuiThemeProvider theme={THEME}>\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                  className=\"App\">\r\n                <Grid item xl={6} md={6} sm={10} xs={11}>\r\n                    <div className={classes.gameWrap}>\r\n                        <div className={classes.game}>\r\n                            <Hangman></Hangman>\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </MuiThemeProvider>\r\n    );\r\n}\r\n\r\nexport default withStyles(AppStyle, {withTheme: true})(App);\r\n","import {Theme} from '@material-ui/core';\r\n\r\nconst AppStyle = (theme: Theme) => ({\r\n    gameWrap: {\r\n        background: 'linear-gradient(90deg, rgba(0, 30, 41, 0.75), rgba(197, 0, 50, 0.65))',\r\n        padding: '0.7rem',\r\n        borderRadius: '1em',\r\n    },\r\n    game: {\r\n        height: '560px',\r\n        backgroundColor: '#251818',\r\n        color: 'white',\r\n        [theme.breakpoints.down('md')]: {\r\n            height: '600px',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '90%',\r\n        },\r\n    }\r\n});\r\n\r\nexport {\r\n    AppStyle,\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}